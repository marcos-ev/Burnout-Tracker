// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  integrations Integration[]
  burnoutScores BurnoutScore[]
  alerts Alert[]
  settings UserSettings?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Integration {
  id          String   @id @default(cuid())
  userId      String
  type        String   // 'github', 'wakatime', 'rescuetime'
  accessToken String
  refreshToken String?
  expiresAt   DateTime?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type])
}

model BurnoutScore {
  id                String   @id @default(cuid())
  userId            String
  score             Int      // 0-100
  lateNightWork     Int      // 0-25
  weekendWork       Int      // 0-20
  longSessions      Int      // 0-20
  highFrequency     Int      // 0-15
  lowBreaks         Int      // 0-10
  stressIndicators  Int      // 0-10
  createdAt         DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Alert {
  id        String   @id @default(cuid())
  userId    String
  type      String   // 'warning', 'critical', 'info'
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSettings {
  id                    String   @id @default(cuid())
  userId                String   @unique
  alertThreshold        Int      @default(70)
  weeklyReport          Boolean  @default(true)
  dailyCheckIn          Boolean  @default(true)
  workHoursStart        Int      @default(9)
  workHoursEnd          Int      @default(18)
  maxDailyHours         Int      @default(10)
  breakReminderMinutes  Int      @default(60)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}